// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: distribution_server.proto

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DistributionServerMessageServiceClient is the client API for DistributionServerMessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistributionServerMessageServiceClient interface {
	SendMessage(ctx context.Context, in *DistributionServerMessage, opts ...grpc.CallOption) (*DistributionServerResponse, error)
	UserConnected(ctx context.Context, in *DistributionServerConnectionRequest, opts ...grpc.CallOption) (*DistributionServerResponse, error)
	UserDisconnected(ctx context.Context, in *DistributionServerConnectionRequest, opts ...grpc.CallOption) (*DistributionServerResponse, error)
}

type distributionServerMessageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDistributionServerMessageServiceClient(cc grpc.ClientConnInterface) DistributionServerMessageServiceClient {
	return &distributionServerMessageServiceClient{cc}
}

func (c *distributionServerMessageServiceClient) SendMessage(ctx context.Context, in *DistributionServerMessage, opts ...grpc.CallOption) (*DistributionServerResponse, error) {
	out := new(DistributionServerResponse)
	err := c.cc.Invoke(ctx, "/DistributionServerMessageService/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributionServerMessageServiceClient) UserConnected(ctx context.Context, in *DistributionServerConnectionRequest, opts ...grpc.CallOption) (*DistributionServerResponse, error) {
	out := new(DistributionServerResponse)
	err := c.cc.Invoke(ctx, "/DistributionServerMessageService/UserConnected", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributionServerMessageServiceClient) UserDisconnected(ctx context.Context, in *DistributionServerConnectionRequest, opts ...grpc.CallOption) (*DistributionServerResponse, error) {
	out := new(DistributionServerResponse)
	err := c.cc.Invoke(ctx, "/DistributionServerMessageService/UserDisconnected", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistributionServerMessageServiceServer is the server API for DistributionServerMessageService service.
// All implementations must embed UnimplementedDistributionServerMessageServiceServer
// for forward compatibility
type DistributionServerMessageServiceServer interface {
	SendMessage(context.Context, *DistributionServerMessage) (*DistributionServerResponse, error)
	UserConnected(context.Context, *DistributionServerConnectionRequest) (*DistributionServerResponse, error)
	UserDisconnected(context.Context, *DistributionServerConnectionRequest) (*DistributionServerResponse, error)
	mustEmbedUnimplementedDistributionServerMessageServiceServer()
}

// UnimplementedDistributionServerMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDistributionServerMessageServiceServer struct {
}

func (UnimplementedDistributionServerMessageServiceServer) SendMessage(context.Context, *DistributionServerMessage) (*DistributionServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedDistributionServerMessageServiceServer) UserConnected(context.Context, *DistributionServerConnectionRequest) (*DistributionServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserConnected not implemented")
}
func (UnimplementedDistributionServerMessageServiceServer) UserDisconnected(context.Context, *DistributionServerConnectionRequest) (*DistributionServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDisconnected not implemented")
}
func (UnimplementedDistributionServerMessageServiceServer) mustEmbedUnimplementedDistributionServerMessageServiceServer() {
}

// UnsafeDistributionServerMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistributionServerMessageServiceServer will
// result in compilation errors.
type UnsafeDistributionServerMessageServiceServer interface {
	mustEmbedUnimplementedDistributionServerMessageServiceServer()
}

func RegisterDistributionServerMessageServiceServer(s grpc.ServiceRegistrar, srv DistributionServerMessageServiceServer) {
	s.RegisterService(&DistributionServerMessageService_ServiceDesc, srv)
}

func _DistributionServerMessageService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistributionServerMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionServerMessageServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DistributionServerMessageService/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionServerMessageServiceServer).SendMessage(ctx, req.(*DistributionServerMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributionServerMessageService_UserConnected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistributionServerConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionServerMessageServiceServer).UserConnected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DistributionServerMessageService/UserConnected",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionServerMessageServiceServer).UserConnected(ctx, req.(*DistributionServerConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributionServerMessageService_UserDisconnected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistributionServerConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionServerMessageServiceServer).UserDisconnected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DistributionServerMessageService/UserDisconnected",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionServerMessageServiceServer).UserDisconnected(ctx, req.(*DistributionServerConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DistributionServerMessageService_ServiceDesc is the grpc.ServiceDesc for DistributionServerMessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DistributionServerMessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DistributionServerMessageService",
	HandlerType: (*DistributionServerMessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _DistributionServerMessageService_SendMessage_Handler,
		},
		{
			MethodName: "UserConnected",
			Handler:    _DistributionServerMessageService_UserConnected_Handler,
		},
		{
			MethodName: "UserDisconnected",
			Handler:    _DistributionServerMessageService_UserDisconnected_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "distribution_server.proto",
}
