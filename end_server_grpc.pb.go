// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: end_server.proto

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EndServerMessageServiceClient is the client API for EndServerMessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EndServerMessageServiceClient interface {
	ReceiveMessage(ctx context.Context, in *EndServerMessage, opts ...grpc.CallOption) (*EndServerResponse, error)
}

type endServerMessageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEndServerMessageServiceClient(cc grpc.ClientConnInterface) EndServerMessageServiceClient {
	return &endServerMessageServiceClient{cc}
}

func (c *endServerMessageServiceClient) ReceiveMessage(ctx context.Context, in *EndServerMessage, opts ...grpc.CallOption) (*EndServerResponse, error) {
	out := new(EndServerResponse)
	err := c.cc.Invoke(ctx, "/EndServerMessageService/ReceiveMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EndServerMessageServiceServer is the server API for EndServerMessageService service.
// All implementations must embed UnimplementedEndServerMessageServiceServer
// for forward compatibility
type EndServerMessageServiceServer interface {
	ReceiveMessage(context.Context, *EndServerMessage) (*EndServerResponse, error)
	mustEmbedUnimplementedEndServerMessageServiceServer()
}

// UnimplementedEndServerMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEndServerMessageServiceServer struct {
}

func (UnimplementedEndServerMessageServiceServer) ReceiveMessage(context.Context, *EndServerMessage) (*EndServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveMessage not implemented")
}
func (UnimplementedEndServerMessageServiceServer) mustEmbedUnimplementedEndServerMessageServiceServer() {
}

// UnsafeEndServerMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EndServerMessageServiceServer will
// result in compilation errors.
type UnsafeEndServerMessageServiceServer interface {
	mustEmbedUnimplementedEndServerMessageServiceServer()
}

func RegisterEndServerMessageServiceServer(s grpc.ServiceRegistrar, srv EndServerMessageServiceServer) {
	s.RegisterService(&EndServerMessageService_ServiceDesc, srv)
}

func _EndServerMessageService_ReceiveMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndServerMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EndServerMessageServiceServer).ReceiveMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EndServerMessageService/ReceiveMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EndServerMessageServiceServer).ReceiveMessage(ctx, req.(*EndServerMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// EndServerMessageService_ServiceDesc is the grpc.ServiceDesc for EndServerMessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EndServerMessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EndServerMessageService",
	HandlerType: (*EndServerMessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReceiveMessage",
			Handler:    _EndServerMessageService_ReceiveMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "end_server.proto",
}
